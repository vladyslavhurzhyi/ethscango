{"version":3,"file":"static/js/914.97bd03eb.chunk.js","mappings":"iPAKMA,EAAWC,EAAAA,GAFD,YAEoC,CAClDC,UAAW,qCACXC,OAAQ,mCACRC,QAAS,qCAOEC,EAAkB,mCAAG,WAAMC,GAAN,0GAEXN,EAASO,eAAeD,GAFb,UAExBE,EAFwB,gDAIZ,MAJY,cAMtBC,EAAuCD,EAAvCC,KAAMC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,KAAMC,EAAcJ,EAAdI,GAAIC,EAAUL,EAAVK,MANP,kBAQvB,CACLJ,KAAAA,EACAC,YAAAA,EACAC,KAAAA,EACAC,GAAAA,EACAC,MAAOZ,EAAAA,GAAyBY,EAAMC,QAbV,kCAgB9BC,QAAQC,IAAR,MAhB8B,0DAAH,sDAgClBC,EAAW,mCAAG,+GAEJjB,EAASiB,cAFL,cAEjBT,EAFiB,OAGjBU,EAAWjB,EAAAA,GAAyBO,EAAM,QAHzB,kBAKhBW,OAAOD,IALS,gCAOvBH,QAAQC,IAAR,MAPuB,yDAAH,qDAuBXI,EAAiB,mCAAG,6GAEVpB,EAASqB,iBAFC,cAEvBb,EAFuB,OAG7BO,QAAQC,IAAI,0BAA2BR,GAHV,kBAItBA,GAJsB,gCAM7BO,QAAQC,IAAR,MAN6B,yDAAH,oD,uLCjExBM,EAAY,sBAEH,SAASC,IACtB,IAAQjB,GAAoBkB,EAAAA,EAAAA,MAApBlB,gBACR,GAAsCmB,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,MAmBjB,IAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAEqCzB,EAAAA,EAAAA,IAAmBC,GAFxD,UAEUyB,EAFV,gDAKaH,EAAS,gBALtB,OAQID,GAAe,UAAKI,IARxB,gDAUIhB,QAAQC,IAAI,KAAMgB,SAVtB,0DADc,uBAAC,WAAD,wBAcdC,EACD,GAAE,CAAC3B,EAAiBsB,KAEhBF,EACH,OAAO,KAGT,IAAQjB,EAAuCiB,EAAvCjB,KAAMC,EAAiCgB,EAAjChB,YAAaC,EAAoBe,EAApBf,KAAMC,EAAcc,EAAdd,GAAIC,EAAUa,EAAVb,MAErC,OACE,iCACE,SAAC,KAAD,WACE,2BAAQS,OAGV,iBAAMY,UAAU,YAAhB,UACE,iBAAKA,UAAU,yBAAf,WACE,eAAIA,UAAU,gBAAd,SAA+BZ,KAC/B,cAAGY,UAAU,iBAAb,sBAECR,IACC,iBAAKQ,UAAU,oDAAf,WACE,gDACA,gBAAKA,UAAU,wCAAf,SACGzB,KAGH,4CACA,gBAAKyB,UAAU,wCAAf,SACGxB,KAGH,oCACA,gBAAKwB,UAAU,wCAAf,SACGvB,KAGH,kCACA,gBAAKuB,UAAU,wCAAf,SAAwDtB,KAExD,qCACA,iBAAKsB,UAAU,wCAAf,UACGrB,EADH,sBASb,C","sources":["API/getData.js","pages/TransactionDetails.js"],"sourcesContent":["import axios from 'axios';\nimport { ethers } from 'ethers';\n\nconst network = 'homestead';\n\nconst provider = ethers.getDefaultProvider(network, {\n  etherscan: 'RRGX2T9UHU34WNT1V78GWJMGFSUKFFX6ID',\n  infura: '80a2cde872574b6380285aedb7c3fc77',\n  alchemy: 'NGRnDW4RdxfHH_ZgkWkvds6I3wiEQcGi',\n  // pocket: {\n  //   applicationId: '49753bca74527ebbbfcd8d63',\n  //   applicationSecretKey: 'da5ab6ab31ea0cb93b639a4f86648449',\n  // },\n});\n\nexport const getTransactionData = async transactionHash => {\n  try {\n    const data = await provider.getTransaction(transactionHash);\n\n    if (!data) return null;\n\n    const { hash, blockNumber, from, to, value } = data;\n\n    return {\n      hash,\n      blockNumber,\n      from,\n      to,\n      value: ethers.utils.formatEther(value._hex),\n    };\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getTransactionList = async () => {\n  try {\n    const data = await provider.getBlock();\n    const transaction = data.transactions.slice(0, 10);\n    console.log('transactionList', transaction);\n\n    console.log('data', data);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getGasPrice = async () => {\n  try {\n    const data = await provider.getGasPrice();\n    const gasPrice = ethers.utils.formatUnits(data, 'gwei');\n\n    return Number(gasPrice);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getEthPrice = async () => {\n  try {\n    const { data } = await axios.get(\n      'https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD'\n    );\n\n    console.log('ETH Price in USD', data.USD);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const getLastMinedBlock = async () => {\n  try {\n    const data = await provider.getBlockNumber();\n    console.log('last mined block number', data);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n","import { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Helmet } from 'react-helmet-async';\nimport { getTransactionData } from 'API/getData';\n\nconst pageTitle = 'Transaction Details';\n\nexport default function TransactionDetails() {\n  const { transactionHash } = useParams();\n  const [transaction, setTransaction] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    async function fetchTransaction() {\n      try {\n        const transactionDetails = await getTransactionData(transactionHash);\n\n        if (!transactionDetails) {\n          return navigate('/error-page');\n        }\n\n        setTransaction({ ...transactionDetails });\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    fetchTransaction();\n  }, [transactionHash, navigate]);\n\n  if (!transaction) {\n    return null;\n  }\n\n  const { hash, blockNumber, from, to, value } = transaction;\n\n  return (\n    <>\n      <Helmet>\n        <title>{pageTitle}</title>\n      </Helmet>\n\n      <main className=\"px-2 py-4\">\n        <div className=\"container mx-auto px-4\">\n          <h1 className=\"text-2xl mb-5\">{pageTitle}</h1>\n          <p className=\"font-bold mb-3\">Overview</p>\n\n          {transaction && (\n            <div className=\"grid grid-cols-4 md:gap-4 text-sm overflow-x-auto\">\n              <div>Transaction Hash:</div>\n              <div className=\"col-span-4 md:col-span-3 mb-2 md:mb-0\">\n                {hash}\n              </div>\n\n              <div>Block Number:</div>\n              <div className=\"col-span-4 md:col-span-3 mb-2 md:mb-0\">\n                {blockNumber}\n              </div>\n\n              <div>From:</div>\n              <div className=\"col-span-4 md:col-span-3 mb-2 md:mb-0\">\n                {from}\n              </div>\n\n              <div>To:</div>\n              <div className=\"col-span-4 md:col-span-3 mb-2 md:mb-0\">{to}</div>\n\n              <div>Value:</div>\n              <div className=\"col-span-4 md:col-span-3 mb-2 md:mb-0\">\n                {value} Ether\n              </div>\n            </div>\n          )}\n        </div>\n      </main>\n    </>\n  );\n}\n"],"names":["provider","ethers","etherscan","infura","alchemy","getTransactionData","transactionHash","getTransaction","data","hash","blockNumber","from","to","value","_hex","console","log","getGasPrice","gasPrice","Number","getLastMinedBlock","getBlockNumber","pageTitle","TransactionDetails","useParams","useState","transaction","setTransaction","navigate","useNavigate","useEffect","transactionDetails","message","fetchTransaction","className"],"sourceRoot":""}